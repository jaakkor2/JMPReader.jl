var documenterSearchIndex = {"docs":
[{"location":"dev/#Testing","page":"Developer docs","title":"Testing","text":"","category":"section"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"Basic testing with limited number of files","category":"page"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"using Pkg\nPkg.test(\"JMPReader\")","category":"page"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"Utility function JMPReader.scandir is provided that scans recursively the argument directory. For example,","category":"page"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"JMPReader.scandir(joinpath(pathof(JMPReader), \"..\", \"..\", \"test\"))","category":"page"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"reads 12 JMP-files, and","category":"page"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"JMPReader.scandir(raw\"C:\\Program Files\\SAS\\JMPPRO\\17\\Samples\\Data\")","category":"page"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"reads successfully 605 JMP-files.","category":"page"},{"location":"dev/#Looking-into-the-binary-.jmp-file","page":"Developer docs","title":"Looking into the binary .jmp file","text":"","category":"section"},{"location":"dev/#Finding-strings","page":"Developer docs","title":"Finding strings","text":"","category":"section"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"Location of strings in the binary .jmp can be found using a snippet like","category":"page"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"fn = joinpath(pathof(JMPReader), \"..\", \"..\", \"test\", \"example1.jmp\")\nraw = read(fn)\nseq = reinterpret(UInt8, codeunits(\"jäääär\"))\nfindall(seq, raw)","category":"page"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"returns","category":"page"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"1-element Vector{UnitRange{Int64}}:\n 1986:1995","category":"page"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"Hex editor can be useful, for example Hex Editor for VS Code.","category":"page"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"If string is not found, columns could be GZ compressed.  In that case, see options in JMP File->Preferences.","category":"page"},{"location":"dev/#Reading-columns","page":"Developer docs","title":"Reading columns","text":"","category":"section"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"This snippet reads the fourth column","category":"page"},{"location":"dev/","page":"Developer docs","title":"Developer docs","text":"fn = joinpath(pathof(JMPReader), \"..\", \"..\", \"test\", \"example1.jmp\")\nio = open(fn)\ninfo = JMPReader.metadata(io)\nd = JMPReader.column_data(io, info, 4, Vector{UInt8}())\nclose(io)","category":"page"},{"location":"interop/#Interoperability-with-other-languages","page":"Interoperability","title":"Interoperability with other languages","text":"","category":"section"},{"location":"interop/","page":"Interoperability","title":"Interoperability","text":"These example show how JMPReader.jl could be used from other languages.","category":"page"},{"location":"interop/#R","page":"Interoperability","title":"R","text":"","category":"section"},{"location":"interop/","page":"Interoperability","title":"Interoperability","text":"install.packages(\"JuliaCall\")\nlibrary(JuliaCall)\njulia_setup(installJulia = TRUE)\njulia_install_package_if_needed(\"JMPReader\")\njulia_library(\"JMPReader\")\ndf <- julia_call(\"readjmp\", \"example1.jmp\")","category":"page"},{"location":"interop/#Python","page":"Interoperability","title":"Python","text":"","category":"section"},{"location":"interop/","page":"Interoperability","title":"Interoperability","text":"With juliacall and pandas installed","category":"page"},{"location":"interop/","page":"Interoperability","title":"Interoperability","text":"from juliacall import Main as jl\njl.seval(\"using JMPReader\")\ndf = jl.readjmp(\"example1.jmp\")\npt = jl.pytable(df, \"pandas\")","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"CurrentModule = JMPReader","category":"page"},{"location":"#JMPReader","page":"Usage","title":"JMPReader","text":"","category":"section"},{"location":"","page":"Usage","title":"Usage","text":"Documentation for JMPReader.","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"JMP is commercial statistical software.  This package provides an independent reader for .jmp files implemented in Julia.","category":"page"},{"location":"#Basic-usage","page":"Usage","title":"Basic usage","text":"","category":"section"},{"location":"","page":"Usage","title":"Usage","text":"Basic usage is","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"using JMPReader\nfn = joinpath(pathof(JMPReader), \"..\", \"..\", \"test\", \"example1.jmp\")\ndf = readjmp(fn)","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"to read file fn and get the data as a Julia DataFrame.  All columns are included","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"4×12 DataFrame\n Row │ ints  floats   charconstwidth  time                 date        duration              charconstwidth2  charvariable16                     formula  pressures          char utf8  charvariable8\n     │ Int8  Float64  String          DateTime?            Date?       Millisec…             String           String                             String   Float64?           String     String\n─────┼────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────\n   1 │    1     11.1  a               1976-04-01T21:12:00  2024-01-13  2322000 milliseconds  a                aa                                 2            101.325        ꙮꙮꙮ        a\n   2 │    2     22.2  b               1984-08-06T23:58:00  2024-01-14  364000 milliseconds   bb               bbbb                               4        missing            🚴💨       bb\n   3 │    3     33.3  c               2003-06-02T17:00:00  missing     229000 milliseconds   ccc              cccccccc                           6              2.6          jäääär     cc\n   4 │    4     44.4  d               missing              2032-02-12  0 milliseconds        dddd             abcdefghijabcdefghijabcdefghijab…  8              4.63309e110  辛口       abcdefghijkl","category":"page"},{"location":"#Choosing-columns","page":"Usage","title":"Choosing columns","text":"","category":"section"},{"location":"","page":"Usage","title":"Usage","text":"Two keyword arguments are available, select and drop","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"df = readjmp(fn, select=[2, \"date\", r\"^char\"], drop=[r\"varia\"])","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"returns the second column floats, a column named date, columns that start with char, but excluding columns whose name contain a string varia.","category":"page"},{"location":"","page":"Usage","title":"Usage","text":"4×5 DataFrame\n Row │ floats   charconstwidth  date        charconstwidth2  char utf8\n     │ Float64  String          Date?       String           String\n─────┼─────────────────────────────────────────────────────────────────\n   1 │    11.1  a               2024-01-13  a                ꙮꙮꙮ\n   2 │    22.2  b               2024-01-14  bb               🚴💨\n   3 │    33.3  c               missing     ccc              jäääär\n   4 │    44.4  d               2032-02-12  dddd             辛口","category":"page"}]
}
